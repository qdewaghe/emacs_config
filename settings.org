* repositories
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                     ("melpa" . "http://melpa.org/packages/")))

  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC
* minor settings
** scrollbar
   #+BEGIN_SRC emacs-lisp
   ;;removes the scrollbar in the minibuffer
   (set-window-scroll-bars (minibuffer-window) 0 'none)
   ;;removes all scrollbars
   (scroll-bar-mode -1)
   #+END_SRC
** toolbar and menubar
   #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   (menu-bar-mode -1)
   #+END_SRC
** line and colunm number
   #+BEGIN_SRC emacs-lisp
   (line-number-mode 1)
   (column-number-mode 1)
   (global-linum-mode t)
   #+END_SRC
** terminal
   #+BEGIN_SRC emacs-lisp
   (defalias 'yes-or-no-p 'y-or-n-p)
   (defvar my-term-shell "/bin/bash")
   (global-set-key (kbd "<s-return>") 'shell)
    #+END_SRC
** scrolling
   #+BEGIN_SRC emacs-lisp
     (setq
      scroll-conservatively 1000                     
      scroll-margin 4                                
      scroll-step 1                                  
      mouse-wheel-scroll-amount '(6 ((shift) . 1))   
      mouse-wheel-progressive-speed nil
      redisplay-dont-pause t
      fast-but-imprecise-scrolling nil
      jit-lock-defer-time 0)
   #+END_SRC
** visual line mode
#+BEGIN_SRC emacs-lisp
(visual-line-mode 1)
#+END_SRC
** delete selection by default
   #+BEGIN_SRC emacs-lisp
   (delete-selection-mode)
  #+END_SRC
** default zoom 
   #+BEGIN_SRC emacs-lisp
   (set-face-attribute 'default nil :height 135)
   #+END_SRC
** camelCaseNavigation
   #+BEGIN_SRC emacs-lisp
   (global-subword-mode 1)
   #+END_SRC
** time
  #+BEGIN_SRC emacs-lisp
    (setq display-time-24hr-format t)
    (display-time-mode)
  #+END_SRC
** electric
  #+BEGIN_SRC emacs-lisp
   (setq electric-pair-pairs
  	  '(
  	    (?\" . ?\")
  	    (?\{ . ?\})))

	    (electric-pair-mode)			   
  #+END_SRC
** global auto reverse
    #+BEGIN_SRC emacs-lisp
    (global-auto-revert-mode t)
    #+END_SRC
** visual line mode
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC
** other
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   (setq ring-bell-function 'ignore)
   (global-hl-line-mode t)
   #+END_SRC 
** org agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (append  (file-expand-wildcards "~/Dropbox/notes/*.org")))
#+END_SRC
** undo tree
#+BEGIN_SRC emacs-lisp
(setq undo-tree-visualizer-timestamps t)
#+END_SRC
* packages
** diminish
  #+BEGIN_SRC emacs-lisp
   (use-package diminish
     :ensure t
     :init
     (diminish 'my-keys-minor-mode)
     (diminish 'company-mode)
     (diminish 'hungry-delete-mode))

   (eval-after-load "my-keys" '(diminish 'my-keys-minor-mode))
   (eval-after-load "beacon" '(diminish 'beacon-mode))
   (eval-after-load "org mode src" '(diminish 'org-src-mode))
   (eval-after-load "subword" '(diminish 'subword-mode))
   (eval-after-load "eldoc" '(diminish 'eldoc-mode))
   (eval-after-load "projectile" '(diminish 'projectile-mode))
   (eval-after-load "which-key" '(diminish 'which-key-mode))
   (eval-after-load "hungry delete" '(diminish 'hungry-delete-mode))
   (eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
   (eval-after-load "company-mode" '(diminish 'company-mode))
  #+END_SRC
** try
  #+BEGIN_SRC emacs-lisp
  (use-package try
   :ensure t)
  #+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+END_SRC
** beacon
  #+BEGIN_SRC emacs-lisp
  (use-package beacon
     :ensure t
     :init
     (beacon-mode 1))
  #+END_SRC
** projectile
  #+BEGIN_SRC emacs-lisp
	(use-package projectile
	  :ensure t
	  :bind ("C-c p" . projectile-command-map)
	  :config
	  (projectile-global-mode)
	  (setq projectile-enable-caching t)
	  (setq projectile-completion-system 'ivy))      

  #+END_SRC
** search
#+BEGIN_SRC emacs-lisp
  (use-package swiper
  :ensure try
    :bind (("C-f" . swiper)
	   ("C-F" . swiper)
	   ("C-c C-r" . ivy-resume)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))

  (use-package avy
    :ensure t
    :bind ("M-f" . avy-goto-word-1))
#+END_SRC
** magit
  #+BEGIN_SRC emacs-lisp
   (use-package magit
     :ensure t
     :init
     (bind-key "C-c g" 'magit-status))
  #+END_SRC
** yasnippets
  #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :ensure t
     :init
     (yas-global-mode 1))
     
   (yas-reload-all)
  #+END_SRC
** rainbow
  #+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
   :ensure t
   :config 
   (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
  #+END_SRC
** hungry delete
  #+BEGIN_SRC emacs-lisp
   (use-package hungry-delete
     :ensure t
     :config
     (global-hungry-delete-mode))
  #+END_SRC
** flycheck
  #+BEGIN_SRC emacs-lisp
    ;;(use-package flycheck
    ;;  :ensure t
    ;;  :init 
    ;;  (add-hook 'c++-mode-hook #'flycheck-mode))
  #+END_SRC
** dashboard
  #+BEGIN_SRC emacs-lisp
    (use-package dashboard
      :ensure t)

    (use-package dashboard
      :config
      (setq dashboard-items '((projects . 5)
			       (recents . 5)))
      (setq dashboard-startup-banner 1)
      (dashboard-setup-startup-hook))
  #+END_SRC

** expand region
    #+BEGIN_SRC emacs-lisp
      (use-package expand-region
	:ensure t)
    #+END_SRC
** switch window
    #+BEGIN_SRC emacs-lisp
      (use-package switch-window
	:ensure t
	:config
	(setq switch-window-input-style 'minibuffer)
	(setq switch-window-increase 4)
	(setq switch-window-threshold 2)
	(setq switch-window-shortcut-style 'qwerty)
	(setq switch-window-qwerty-shortcut
	      '("a", "o", "e", "u", "i", "d", "h", "t", "n", "s"))
	:bind
	([remap other-window] . switch-window))
    #+END_SRC
** spaceline
    #+BEGIN_SRC emacs-lisp
      (use-package spaceline
	:ensure t
	:init
	(setq powerline-default-separator 'slant)
	:config
	(spaceline-emacs-theme)
	(spaceline-toggle-minor-modes-off)
	(spaceline-toggle-buffer-size-off)
	(spaceline-toggle-evil-state-on))
    #+END_SRC
** lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t)

  (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
  (add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
#+END_SRC
* theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t))
#+END_SRC
* ido counsel ivy
#+BEGIN_SRC emacs-lisp
  (setq indo-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)

  (defalias 'list-buffers 'ibuffer)
  (use-package counsel  
    :ensure t)

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))
#+END_SRC
* org mode
** babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((C . t)
     (lua . t)
  ))
#+END_SRC
** org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :init
    (add-hook 'org-mode-hook (lambda ()
			       (org-bullets-mode 1))))

  (setq org-hide-emphasis-markers t)
  (font-lock-add-keywords 'org-mode
			  '(("^ +\\([-*]\\) "
			     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))
#+END_SRC
** timestamp export
#+BEGIN_SRC emacs-lisp
  (setq org-time-stamp-custom-formats
	'("<%d/%m/%y>" . "<%d/%m/%y %H:%M:%S>"))



  (defun org-export-filter-timestamp-remove-brackets (timestamp backend info)
    (cond
     ((org-export-derived-backend-p backend 'latex)
      (replace-regexp-in-string "[<>]\\|[][]" "" timestamp))
     ((org-export-derived-backend-p backend 'html)
      (replace-regexp-in-string "&[lg]t;\\|[][]" "" timestamp))))

  (eval-after-load 'ox '(add-to-list
			 'org-export-filter-timestamp-functions
			 'org-export-filter-timestamp-remove-brackets))

  (setq-default org-display-custom-times t)
#+END_SRC
** latex export
   #+BEGIN_SRC emacs-lisp
     (require 'org)
     (require 'ox-latex)
     (add-to-list 'org-latex-packages-alist '("" "minted"))
     (setq org-latex-listings 'minted) 
     (setq org-src-fontify-natively t)

     (setq org-latex-pdf-process
	   '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
   #+END_SRC
** reveal js
#+BEGIN_SRC emacs-lisp
  (setq org-reveal-root (expand-file-name "~/.emacs.d/reveal.js/"))

  (use-package ox-reveal
    :ensure t)

  (use-package htmlize
    :ensure t)

  (setq org-reveal-mathjax t)

  (setq org-src-window-setup 'current-window)
#+END_SRC
* functions
** kill a whole word
  #+BEGIN_SRC emacs-lisp
    (defun kill-whole-word()
      (interactive)
      (backward-word)
      (kill-word 1))
    (global-set-key (kbd "C-c w w") 'kill-whole-word)
    #+END_SRC
** reload
    #+BEGIN_SRC emacs-lisp
    ;;f has to be lowercase btw
      (defun config-reload()
	(interactive)
	(org-babel-load-file (expand-file-name "~/.emacs.d/settings.org")))
      (global-set-key (kbd "<f5>") 'config-reload)
    #+END_SRC
** window
*** split horizontally 
      #+BEGIN_SRC emacs-lisp
	(defun split-and-follow-horizontally ()
	  (interactive)
	  (split-window-below)
	  (balance-windows)
	  (other-window 1))
	  ;;two versions so it works anyway if I press 2 too fast
	(global-set-key (kbd "C-c 2") 'split-and-follow-horizontally)
	(global-set-key (kbd "C-c C-2") 'split-and-follow-horizontally)
	
      #+END_SRC
*** split vertically
      #+BEGIN_SRC emacs-lisp
	(defun split-and-follow-vertically ()
	    (interactive)
	    (split-window-right)
	    (balance-windows)
	    (other-window 1))
	    ;;two versions so it works anyway if I press 3 too fast
	(global-set-key (kbd "C-c 3") 'split-and-follow-vertically)
	(global-set-key (kbd "C-c C-3") 'split-and-follow-vertically)
      #+END_SRC
** duplicate line
#+BEGIN_SRC emacs-lisp
 (defun duplicate-line ()
   (interactive)
   (let ((col (current-column)))
     (move-beginning-of-line 1)
     (kill-line)
     (yank)
     (newline)
     (yank)
     (move-to-column col)))

 (global-set-key (kbd "C-c h") 'duplicate-line)

#+END_SRC
** move line
#+BEGIN_SRC emacs-lisp
  (defun move-text-internal (arg)
     (cond
      ((and mark-active transient-mark-mode)
       (if (> (point) (mark))
	      (exchange-point-and-mark))
       (let ((column (current-column))
		(text (delete-and-extract-region (point) (mark))))
	 (forward-line arg)
	 (move-to-column column t)
	 (set-mark (point))
	 (insert text)
	 (exchange-point-and-mark)
	 (setq deactivate-mark nil)))
      (t
       (beginning-of-line)
       (when (or (> arg 0) (not (bobp)))
	 (forward-line)
	 (when (or (< arg 0) (not (eobp)))
	      (transpose-lines arg))
	 (forward-line -1)))))

  (defun move-text-down (arg)
     "Move region (transient-mark-mode active) or current line
    arg lines down."
     (interactive "*p")
     (move-text-internal arg))

  (defun move-text-up (arg)
     "Move region (transient-mark-mode active) or current line
    arg lines up."
     (interactive "*p")
     (move-text-internal (- arg)))

  (defun move-text-internal (arg)
     (cond
      ((and mark-active transient-mark-mode)
       (if (> (point) (mark))
	      (exchange-point-and-mark))
       (let ((column (current-column))
		(text (delete-and-extract-region (point) (mark))))
	 (forward-line arg)
	 (move-to-column column t)
	 (set-mark (point))
	 (insert text)
	 (exchange-point-and-mark)
	 (setq deactivate-mark nil)))
      (t
       (beginning-of-line)
       (when (or (> arg 0) (not (bobp)))
	 (forward-line)
	 (when (or (< arg 0) (not (eobp)))
	      (transpose-lines arg))
	 (forward-line -1)))))

  (defun move-text-down (arg)
     "Move region (transient-mark-mode active) or current line
    arg lines down."
     (interactive "*p")
     (move-text-internal arg))

  (defun move-text-up (arg)
     "Move region (transient-mark-mode active) or current line
    arg lines up."
     (interactive "*p")
     (move-text-internal (- arg)))

  (global-set-key (kbd "C-c c") 'move-text-up)
  (global-set-key (kbd "C-c t") 'move-text-down)
#+END_SRC
** narrowing
#+BEGIN_SRC emacs-lisp
(defvar-local narrow-reindent--point-min 0)
(defvar-local narrow-reindent--point-max 0)
(defvar-local narrow-reindent--indent-amount 0)

(define-minor-mode narrow-reindent-mode
  "Toggle Narrow-Reindent mode.
When Narrow-Reindent mode is active, after narrowing the buffer
is re-indented. After widening, this narrowed region is
re-indented again. This mode uses the `indent-region' to perform
indentation."
  :lighter " NaRe"
  :group 'narrow-reindent
  :init-value nil
  ;; Advice is inherently global. Did not know that during first writing. There
  ;; are no narrow hooks. Not super sure about this method now. Regardless, it
  ;; works.
  (advice-add #'narrow-to-defun :after #'narrow-reindent--after-narrow)
  (advice-add #'narrow-to-page :after #'narrow-reindent--after-narrow)
  (advice-add #'narrow-to-region :after #'narrow-reindent--after-narrow)
  (advice-add #'widen :before #'narrow-reindent--before-widen))

(defmacro without-undo (&rest forms)
  "Executes FORMS with a temporary buffer-undo-list that is discarded afterwards.
Taken from http://www.emacswiki.org/emacs/UndoCommands with some
modifications."
`(let* ((buffer-undo-list)
          (modified (buffer-modified-p))
          (inhibit-read-only t))
   (unwind-protect
       (progn ,@forms)
     (set-buffer-modified-p modified)) ()))

(defun narrow-reindent--after-narrow (&rest _r)
  "Indent narrowed buffer. This function is used as advice for
`narrow-to-defun' and friends."
  (when narrow-reindent-mode
    (let ((beg (point-min))
          (end (point-max)))
      (setq narrow-reindent--point-min beg)
      (setq narrow-reindent--point-max end)
      (setq narrow-reindent--indent-amount (indent-rigidly--current-indentation beg end))
      (without-undo
       (indent-rigidly beg end (- narrow-reindent--indent-amount))))))

(defun narrow-reindent--before-widen (&rest _r)
  "Indent the region that the buffer was narrowed to. This
function is used as advice for `widen'."
  (when narrow-reindent-mode
    (without-undo
     (indent-rigidly narrow-reindent--point-min narrow-reindent--point-max narrow-reindent--indent-amount))))

(provide 'narrow-reindent)
#+END_SRC
* languages
  #+BEGIN_SRC emacs-lisp

    (use-package clang-format
      :ensure t
      :commands clang-format clang-format-buffer clang-format-region)

      (fset 'c++-indent-region 'clang-format-region)

    (use-package modern-cpp-font-lock
      :ensure t
      :hook (c++-mode . modern-c++-font-lock-mode))

      


    (add-hook 'lua-mode-hook 
	      (lambda () (unless (fboundp 'lua-calculate-indentation-right-shift-next)
			   (load-file (locate-file "my-lua.el" load-path)))))

  #+END_SRC
* language server
** lsp
  #+BEGIN_SRC emacs-lisp
    (use-package lsp-mode 
      :ensure t
      :commands lsp
      :hook (prog-mode . lsp))

    (use-package lsp-ui
     :custom-face
     (lsp-ui-doc-background ((t (:background nil))))
     (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
     :init (setq lsp-ui-doc-enable t
                 lsp-ui-doc-header t
                 lsp-ui-doc-include-signature t
                 lsp-ui-doc-position 'top
                 lsp-ui-doc-use-webkit t
                 lsp-ui-doc-border (face-foreground 'default)

                 lsp-ui-sideline-enable nil
                 lsp-ui-sideline-ignore-duplicate t)
     :config
     ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
     ;; https://github.com/emacs-lsp/lsp-ui/issues/243
     (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
       (setq mode-line-format nil)))

    (use-package company-lsp 
      :ensure t
      :commands company-lsp
      :config (push 'company-lsp company-backends))
  #+END_SRC
** ccls
   #+BEGIN_SRC emacs-lisp
     (use-package ccls
       :ensure t
       :after projectile
       :init
       (setq ccls-executable "~/ccls/Release/ccls")
       (setq ccls-sem-highlight-method 'font-lock)
       (with-eval-after-load 'projectile
	 (add-to-list 'projectile-globally-ignored-directories ".ccls-cache"))
       (setq lsp-prefer-flymake nil)
       (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
       :custom (projectile-project-root-files-top-down-recurring
		(append '("compile_commands.json" ".ccls")
			projectile-project-root-files-top-down-recurring))
       :hook ((c-mode c++-mode objc-mode) .
	      (lambda () (require 'ccls) (lsp))))
   #+END_SRC
** company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :diminish ""
       :ensure t
       :config
       (setq company-idle-delay 0.3)
       (setq company-minimum-prefix-length 1)
       (global-company-mode t))

     (with-eval-after-load 'company
       (define-key company-active-map (kbd "M-n") nil)
       (define-key company-active-map (kbd "M-p") nil)
       (define-key company-active-map (kbd "H-i") 'company-select-previous)
       (define-key company-active-map (kbd "C-k") 'company-select-next))
   
       (setq company-transformers nil company-lsp-async t company-lsp-cache-candidates nil)
   #+END_SRC
* keybindings
  #+BEGIN_SRC emacs-lisp
    (defvar my-keys-minor-mode-map
      (let ((map (make-sparse-keymap)))
	(define-key map (kbd "C-z") 'undo)
	(define-key map (kbd "C-s") 'save-buffer)
	(define-key map (kbd "C-c C-f") 'counsel-find-file)
	(define-key map (kbd "C-c r j") 'jump-to-register)
	(define-key map (kbd "C-v") (kbd "C-y"))
	(define-key map (kbd "C-p") 'universal-argument)
	(define-key map (kbd "C-c C-;") 'clang-format-buffer)
	(define-key map (kbd "C-c l") 'recenter)

	;;Tab = C-i thing
	(define-key input-decode-map (kbd "C-i") (kbd "H-i"))
	
	;;my way of avoiding emacs' pinky (caps lock is rebinded to backspace already)
	(define-key input-decode-map (kbd "C-SPC") (kbd "C-c"))

	;;window with two versions so it works even if I press the number too fast
	(define-key map (kbd "C-c 1") 'delete-other-windows)
	(define-key map (kbd "C-c C-1") 'delete-other-windows)

	(define-key map (kbd "C-c 0") 'delete-window)
	(define-key map (kbd "C-c C-0") 'delete-window)

	(define-key map (kbd "C-c o") 'switch-window)
	(define-key map (kbd "C-c a") 'ff-find-other-file)
	(define-key map (kbd "C-c e") 'other-frame)

	;;frames
	(define-key map (kbd "C-c 4 1") 'delete-other-frames)
	(define-key map (kbd "C-c 4 0") 'delete-frame)
	(define-key map (kbd "C-c 4 u") 'projectile-find-file-other-frame)
	(define-key map (kbd "C-c 4 2") 'find-file-other-frame)
	(define-key map (kbd "C-c 4 3") 'find-file-other-frame)

	;;switch buffer
	(define-key map (kbd "C-c b") 'ivy-switch-buffer)
	(define-key map (kbd "C-c C-b") 'ivy-switch-buffer)

	;;copy/cut paste	
	(define-key map (kbd "C-c C-y") 'kill-ring-save)
	(define-key map (kbd "C-c f") 'kill-region)
	
	;;mark
	(define-key map (kbd "<C-tab>") 'set-mark-command)

	;;navigation by one
	(define-key map (kbd "H-i") 'previous-line)
	(define-key map (kbd "C-k") 'next-line)
	(define-key map (kbd "C-j") 'backward-char)
	(define-key map (kbd "C-l") 'forward-char)

	;;navigation by one element
	(define-key map (kbd "M-i") 'backward-sentence)	
	(define-key map (kbd "M-k") 'forward-sentence)
	(define-key map (kbd "M-j") 'backward-word)
	(define-key map (kbd "M-l") 'forward-word)

	;;move to end of *
	(define-key map (kbd "C-u") 'move-beginning-of-line)
	(define-key map (kbd "C-o") 'move-end-of-line)
	(define-key map (kbd "M-u") 'beginning-of-buffer)
	(define-key map (kbd "M-o") 'end-of-buffer)

	;;expand region
	(define-key map (kbd "C-e") 'er/expand-region)
	(define-key map (kbd "C-r") 'er/contract-region)

	;;deleting stuff
	(define-key map (kbd "M-<DEL>") 'kill-line)

	;;main keys
	(define-key map (kbd "`") 'execute-extended-command)
	  map)
	"my-keys-minor-mode keymap.")

	(define-minor-mode my-keys-minor-mode
	:init-value t
	:lighter " my-keys")
	
	(my-keys-minor-mode 1)

 #+END_SRC
* registers
#+BEGIN_SRC emacs-lisp
  (set-register ?e(cons 'file "~/.emacs.d/settings.org"))
  (set-register ?n(cons 'file "~/Dropbox/notes/todo.org"))
#+END_SRC
